{"ast":null,"code":"import _isNil from \"lodash/isNil\";\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport reduceCSSCalc from 'reduce-css-calc';\nimport classNames from 'classnames';\nimport { isNumber, isNumOrStr } from '../util/DataUtils';\nimport { PRESENTATION_ATTRIBUTES, getPresentationAttributes, isSsr } from '../util/ReactUtils';\nimport { getStringSize } from '../util/DOMUtils';\nvar BREAKING_SPACES = /[ \\f\\n\\r\\t\\v\\u2028\\u2029]+/;\n\nvar calculateWordWidths = function calculateWordWidths(props) {\n  try {\n    var words = !_isNil(props.children) ? props.children.toString().split(BREAKING_SPACES) : [];\n    var wordsWithComputedWidth = words.map(function (word) {\n      return {\n        word: word,\n        width: getStringSize(word, props.style).width\n      };\n    });\n    var spaceWidth = getStringSize(\"\\xA0\", props.style).width;\n    return {\n      wordsWithComputedWidth: wordsWithComputedWidth,\n      spaceWidth: spaceWidth\n    };\n  } catch (e) {\n    return null;\n  }\n};\n\nvar Text =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Text, _Component);\n\n  function Text() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Text);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Text)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      wordsByLines: []\n    };\n    return _this;\n  }\n\n  _createClass(Text, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.updateWordsByLines(this.props, true);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var needCalculate = this.props.children !== nextProps.children || this.props.style !== nextProps.style;\n      this.updateWordsByLines(nextProps, needCalculate);\n    }\n  }, {\n    key: \"updateWordsByLines\",\n    value: function updateWordsByLines(props, needCalculate) {\n      // Only perform calculations if using features that require them (multiline, scaleToFit)\n      if ((props.width || props.scaleToFit) && !isSsr()) {\n        if (needCalculate) {\n          var wordWidths = calculateWordWidths(props);\n\n          if (wordWidths) {\n            var wordsWithComputedWidth = wordWidths.wordsWithComputedWidth,\n                spaceWidth = wordWidths.spaceWidth;\n            this.wordsWithComputedWidth = wordsWithComputedWidth;\n            this.spaceWidth = spaceWidth;\n          } else {\n            this.updateWordsWithoutCalculate(props);\n            return;\n          }\n        }\n\n        var wordsByLines = this.calculateWordsByLines(this.wordsWithComputedWidth, this.spaceWidth, props.width);\n        this.setState({\n          wordsByLines: wordsByLines\n        });\n      } else {\n        this.updateWordsWithoutCalculate(props);\n      }\n    }\n  }, {\n    key: \"updateWordsWithoutCalculate\",\n    value: function updateWordsWithoutCalculate(props) {\n      var words = !_isNil(props.children) ? props.children.toString().split(BREAKING_SPACES) : [];\n      this.setState({\n        wordsByLines: [{\n          words: words\n        }]\n      });\n    }\n  }, {\n    key: \"calculateWordsByLines\",\n    value: function calculateWordsByLines(wordsWithComputedWidth, spaceWidth, lineWidth) {\n      var scaleToFit = this.props.scaleToFit;\n      return (wordsWithComputedWidth || []).reduce(function (result, _ref) {\n        var word = _ref.word,\n            width = _ref.width;\n        var currentLine = result[result.length - 1];\n\n        if (currentLine && (lineWidth == null || scaleToFit || currentLine.width + width + spaceWidth < lineWidth)) {\n          // Word can be added to an existing line\n          currentLine.words.push(word);\n          currentLine.width += width + spaceWidth;\n        } else {\n          // Add first word to line or word is too long to scaleToFit on existing line\n          var newLine = {\n            words: [word],\n            width: width\n          };\n          result.push(newLine);\n        }\n\n        return result;\n      }, []);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          dx = _this$props.dx,\n          dy = _this$props.dy,\n          textAnchor = _this$props.textAnchor,\n          verticalAnchor = _this$props.verticalAnchor,\n          scaleToFit = _this$props.scaleToFit,\n          angle = _this$props.angle,\n          lineHeight = _this$props.lineHeight,\n          capHeight = _this$props.capHeight,\n          className = _this$props.className,\n          textProps = _objectWithoutProperties(_this$props, [\"dx\", \"dy\", \"textAnchor\", \"verticalAnchor\", \"scaleToFit\", \"angle\", \"lineHeight\", \"capHeight\", \"className\"]);\n\n      var wordsByLines = this.state.wordsByLines;\n\n      if (!isNumOrStr(textProps.x) || !isNumOrStr(textProps.y)) {\n        return null;\n      }\n\n      var x = textProps.x + (isNumber(dx) ? dx : 0);\n      var y = textProps.y + (isNumber(dy) ? dy : 0);\n      var startDy;\n\n      switch (verticalAnchor) {\n        case 'start':\n          startDy = reduceCSSCalc(\"calc(\".concat(capHeight, \")\"));\n          break;\n\n        case 'middle':\n          startDy = reduceCSSCalc(\"calc(\".concat((wordsByLines.length - 1) / 2, \" * -\").concat(lineHeight, \" + (\").concat(capHeight, \" / 2))\"));\n          break;\n\n        default:\n          startDy = reduceCSSCalc(\"calc(\".concat(wordsByLines.length - 1, \" * -\").concat(lineHeight, \")\"));\n          break;\n      }\n\n      var transforms = [];\n\n      if (scaleToFit) {\n        var lineWidth = wordsByLines[0].width;\n        transforms.push(\"scale(\".concat(this.props.width / lineWidth, \")\"));\n      }\n\n      if (angle) {\n        transforms.push(\"rotate(\".concat(angle, \", \").concat(x, \", \").concat(y, \")\"));\n      }\n\n      if (transforms.length) {\n        textProps.transform = transforms.join(' ');\n      }\n\n      return React.createElement(\"text\", _extends({}, getPresentationAttributes(textProps), {\n        x: x,\n        y: y,\n        className: classNames('recharts-text', className),\n        textAnchor: textAnchor\n      }), wordsByLines.map(function (line, index) {\n        return React.createElement(\"tspan\", {\n          x: x,\n          dy: index === 0 ? startDy : lineHeight,\n          key: index\n        }, line.words.join(' '));\n      }));\n    }\n  }]);\n\n  return Text;\n}(Component);\n\nText.propTypes = _objectSpread({}, PRESENTATION_ATTRIBUTES, {\n  scaleToFit: PropTypes.bool,\n  angle: PropTypes.number,\n  textAnchor: PropTypes.oneOf(['start', 'middle', 'end', 'inherit']),\n  verticalAnchor: PropTypes.oneOf(['start', 'middle', 'end']),\n  style: PropTypes.object\n});\nText.defaultProps = {\n  x: 0,\n  y: 0,\n  lineHeight: '1em',\n  capHeight: '0.71em',\n  // Magic number from d3\n  scaleToFit: false,\n  textAnchor: 'start',\n  verticalAnchor: 'end' // Maintain compat with existing charts / default SVG behavior\n\n};\nexport default Text;","map":null,"metadata":{},"sourceType":"module"}