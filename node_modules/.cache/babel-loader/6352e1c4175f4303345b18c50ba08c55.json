{"ast":null,"code":"var Mexp = function (parsed) {\n  this.value = parsed;\n};\n\nMexp.math = {\n  isDegree: true,\n  //mode of calculator\n  acos: function (x) {\n    return Mexp.math.isDegree ? 180 / Math.PI * Math.acos(x) : Math.acos(x);\n  },\n  add: function (a, b) {\n    return a + b;\n  },\n  asin: function (x) {\n    return Mexp.math.isDegree ? 180 / Math.PI * Math.asin(x) : Math.asin(x);\n  },\n  atan: function (x) {\n    return Mexp.math.isDegree ? 180 / Math.PI * Math.atan(x) : Math.atan(x);\n  },\n  acosh: function (x) {\n    return Math.log(x + Math.sqrt(x * x - 1));\n  },\n  asinh: function (x) {\n    return Math.log(x + Math.sqrt(x * x + 1));\n  },\n  atanh: function (x) {\n    return Math.log((1 + x) / (1 - x));\n  },\n  C: function (n, r) {\n    var pro = 1,\n        other = n - r,\n        choice = r;\n\n    if (choice < other) {\n      choice = other;\n      other = r;\n    }\n\n    for (var i = choice + 1; i <= n; i++) pro *= i;\n\n    return pro / Mexp.math.fact(other);\n  },\n  changeSign: function (x) {\n    return -x;\n  },\n  cos: function (x) {\n    if (Mexp.math.isDegree) x = Mexp.math.toRadian(x);\n    return Math.cos(x);\n  },\n  cosh: function (x) {\n    return (Math.pow(Math.E, x) + Math.pow(Math.E, -1 * x)) / 2;\n  },\n  div: function (a, b) {\n    return a / b;\n  },\n  fact: function (n) {\n    if (n % 1 !== 0) return \"NAN\";\n    var pro = 1;\n\n    for (var i = 2; i <= n; i++) pro *= i;\n\n    return pro;\n  },\n  inverse: function (x) {\n    return 1 / x;\n  },\n  log: function (i) {\n    return Math.log(i) / Math.log(10);\n  },\n  mod: function (a, b) {\n    return a % b;\n  },\n  mul: function (a, b) {\n    return a * b;\n  },\n  P: function (n, r) {\n    var pro = 1;\n\n    for (var i = Math.floor(n) - Math.floor(r) + 1; i <= Math.floor(n); i++) pro *= i;\n\n    return pro;\n  },\n  Pi: function (low, high, ex) {\n    var pro = 1;\n\n    for (var i = low; i <= high; i++) {\n      pro *= Number(ex.postfixEval({\n        n: i\n      }));\n    }\n\n    return pro;\n  },\n  pow10x: function (e) {\n    var x = 1;\n\n    while (e--) {\n      x *= 10;\n    }\n\n    return x;\n  },\n  sigma: function (low, high, ex) {\n    var sum = 0;\n\n    for (var i = low; i <= high; i++) {\n      sum += Number(ex.postfixEval({\n        n: i\n      }));\n    }\n\n    return sum;\n  },\n  sin: function (x) {\n    if (Mexp.math.isDegree) x = Mexp.math.toRadian(x);\n    return Math.sin(x);\n  },\n  sinh: function (x) {\n    return (Math.pow(Math.E, x) - Math.pow(Math.E, -1 * x)) / 2;\n  },\n  sub: function (a, b) {\n    return a - b;\n  },\n  tan: function (x) {\n    if (Mexp.math.isDegree) x = Mexp.math.toRadian(x);\n    return Math.tan(x);\n  },\n  tanh: function (x) {\n    return Mexp.sinha(x) / Mexp.cosha(x);\n  },\n  toRadian: function (x) {\n    return x * Math.PI / 180;\n  }\n};\n\nMexp.exception = function (message) {\n  this.message = message;\n};\n\nmodule.exports = Mexp;","map":null,"metadata":{},"sourceType":"script"}