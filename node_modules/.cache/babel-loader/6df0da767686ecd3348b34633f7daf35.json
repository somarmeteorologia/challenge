{"ast":null,"code":"import { default as map, prefix } from \"./map\";\n\nfunction Set() {}\n\nvar proto = map.prototype;\nSet.prototype = set.prototype = {\n  constructor: Set,\n  has: proto.has,\n  add: function (value) {\n    value += \"\";\n    this[prefix + value] = value;\n    return this;\n  },\n  remove: proto.remove,\n  clear: proto.clear,\n  values: proto.keys,\n  size: proto.size,\n  empty: proto.empty,\n  each: proto.each\n};\n\nfunction set(object, f) {\n  var set = new Set(); // Copy constructor.\n\n  if (object instanceof Set) object.each(function (value) {\n    set.add(value);\n  }); // Otherwise, assume itâ€™s an array.\n  else if (object) {\n      var i = -1,\n          n = object.length;\n      if (f == null) while (++i < n) set.add(object[i]);else while (++i < n) set.add(f(object[i], i, object));\n    }\n  return set;\n}\n\nexport default set;","map":null,"metadata":{},"sourceType":"module"}