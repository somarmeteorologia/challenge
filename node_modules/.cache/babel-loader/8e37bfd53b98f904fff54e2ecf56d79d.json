{"ast":null,"code":"import _every from \"lodash/every\";\nimport _find from \"lodash/find\";\nimport _sortBy from \"lodash/sortBy\";\nimport _isFunction from \"lodash/isFunction\";\nimport _range from \"lodash/range\";\nimport _throttle from \"lodash/throttle\";\nimport _isNil from \"lodash/isNil\";\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nimport React, { Component, cloneElement, isValidElement, createElement } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Surface from '../container/Surface';\nimport Layer from '../container/Layer';\nimport Tooltip from '../component/Tooltip';\nimport Legend from '../component/Legend';\nimport Curve from '../shape/Curve';\nimport Cross from '../shape/Cross';\nimport Sector from '../shape/Sector';\nimport Dot from '../shape/Dot';\nimport Rectangle from '../shape/Rectangle';\nimport { findAllByType, findChildByType, getDisplayName, parseChildIndex, getPresentationAttributes, validateWidthHeight, isChildrenEqual, renderByOrder, getReactEventByType, filterEventAttributes } from '../util/ReactUtils';\nimport CartesianAxis from '../cartesian/CartesianAxis';\nimport Brush from '../cartesian/Brush';\nimport { getOffset, calculateChartCoordinate } from '../util/DOMUtils';\nimport { getAnyElementOfObject, hasDuplicate, uniqueId, isNumber, findEntryInArray } from '../util/DataUtils';\nimport { calculateActiveTickIndex, getMainColorOfGraphicItem, getBarSizeList, getBarPosition, appendOffsetOfLegend, getLegendProps, combineEventHandlers, getTicksOfAxis, getCoordinatesOfGrid, getStackedDataOfItem, parseErrorBarsOfAxis, getBandSizeOfAxis, getStackGroupsByAxisId, getValueByDataKey, isCategorialAxis, getDomainOfItemsWithSameAxis, getDomainOfStackGroups, getDomainOfDataByKey, detectReferenceElementsDomain, parseSpecifiedDomain, parseDomainOfCategoryAxis } from '../util/ChartUtils';\nimport { inRangeOfSector, polarToCartesian } from '../util/PolarUtils';\nimport { shallowEqual } from '../util/PureRender';\nimport { eventCenter, SYNC_EVENT } from '../util/Events';\nvar ORIENT_MAP = {\n  xAxis: ['bottom', 'top'],\n  yAxis: ['left', 'right']\n};\nvar originCoordinate = {\n  x: 0,\n  y: 0\n};\n\nvar generateCategoricalChart = function generateCategoricalChart(_ref) {\n  var chartName = _ref.chartName,\n      GraphicalChild = _ref.GraphicalChild,\n      _ref$eventType = _ref.eventType,\n      eventType = _ref$eventType === void 0 ? 'axis' : _ref$eventType,\n      axisComponents = _ref.axisComponents,\n      legendContent = _ref.legendContent,\n      formatAxisMap = _ref.formatAxisMap,\n      defaultProps = _ref.defaultProps,\n      propTypes = _ref.propTypes;\n\n  var CategoricalChartWrapper =\n  /*#__PURE__*/\n  function (_Component) {\n    _inherits(CategoricalChartWrapper, _Component);\n    /**\n     * Returns default, reset state for the categorical chart.\n     * @param {Object} props Props object to use when creating the default state\n     * @return {Object} Whole new state\n     */\n\n\n    function CategoricalChartWrapper(_props) {\n      var _this;\n\n      _classCallCheck(this, CategoricalChartWrapper);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(CategoricalChartWrapper).call(this, _props));\n\n      _this.handleLegendBBoxUpdate = function (box) {\n        if (box && _this.legendInstance) {\n          var _this$state = _this.state,\n              dataStartIndex = _this$state.dataStartIndex,\n              dataEndIndex = _this$state.dataEndIndex,\n              updateId = _this$state.updateId;\n\n          _this.setState(_this.updateStateOfAxisMapsOffsetAndStackGroups({\n            props: _this.props,\n            dataStartIndex: dataStartIndex,\n            dataEndIndex: dataEndIndex,\n            updateId: updateId\n          }));\n        }\n      };\n\n      _this.handleReceiveSyncEvent = function (cId, chartId, data) {\n        var _this$props = _this.props,\n            syncId = _this$props.syncId,\n            layout = _this$props.layout;\n        var updateId = _this.state.updateId;\n\n        if (syncId === cId && chartId !== _this.uniqueChartId) {\n          var dataStartIndex = data.dataStartIndex,\n              dataEndIndex = data.dataEndIndex;\n\n          if (!_isNil(data.dataStartIndex) || !_isNil(data.dataEndIndex)) {\n            _this.setState(_objectSpread({\n              dataStartIndex: dataStartIndex,\n              dataEndIndex: dataEndIndex\n            }, _this.updateStateOfAxisMapsOffsetAndStackGroups({\n              props: _this.props,\n              dataStartIndex: dataStartIndex,\n              dataEndIndex: dataEndIndex,\n              updateId: updateId\n            })));\n          } else if (!_isNil(data.activeTooltipIndex)) {\n            var chartX = data.chartX,\n                chartY = data.chartY,\n                activeTooltipIndex = data.activeTooltipIndex;\n            var _this$state2 = _this.state,\n                offset = _this$state2.offset,\n                tooltipTicks = _this$state2.tooltipTicks;\n\n            if (!offset) {\n              return;\n            }\n\n            var viewBox = _objectSpread({}, offset, {\n              x: offset.left,\n              y: offset.top\n            }); // When a categotical chart is combined with another chart, the value of chartX\n            // and chartY may beyond the boundaries.\n\n\n            var validateChartX = Math.min(chartX, viewBox.x + viewBox.width);\n            var validateChartY = Math.min(chartY, viewBox.y + viewBox.height);\n            var activeLabel = tooltipTicks[activeTooltipIndex] && tooltipTicks[activeTooltipIndex].value;\n\n            var activePayload = _this.getTooltipContent(activeTooltipIndex);\n\n            var activeCoordinate = tooltipTicks[activeTooltipIndex] ? {\n              x: layout === 'horizontal' ? tooltipTicks[activeTooltipIndex].coordinate : validateChartX,\n              y: layout === 'horizontal' ? validateChartY : tooltipTicks[activeTooltipIndex].coordinate\n            } : originCoordinate;\n\n            _this.setState(_objectSpread({}, data, {\n              activeLabel: activeLabel,\n              activeCoordinate: activeCoordinate,\n              activePayload: activePayload\n            }));\n          } else {\n            _this.setState(data);\n          }\n        }\n      };\n\n      _this.handleBrushChange = function (_ref2) {\n        var startIndex = _ref2.startIndex,\n            endIndex = _ref2.endIndex; // Only trigger changes if the extents of the brush have actually changed\n\n        if (startIndex !== _this.state.dataStartIndex || endIndex !== _this.state.dataEndIndex) {\n          var updateId = _this.state.updateId;\n\n          _this.setState(function () {\n            return _objectSpread({\n              dataStartIndex: startIndex,\n              dataEndIndex: endIndex\n            }, _this.updateStateOfAxisMapsOffsetAndStackGroups({\n              props: _this.props,\n              dataStartIndex: startIndex,\n              dataEndIndex: endIndex,\n              updateId: updateId\n            }));\n          });\n\n          _this.triggerSyncEvent({\n            dataStartIndex: startIndex,\n            dataEndIndex: endIndex\n          });\n        }\n      };\n\n      _this.handleMouseEnter = function (e) {\n        var onMouseEnter = _this.props.onMouseEnter;\n\n        var mouse = _this.getMouseInfo(e);\n\n        if (mouse) {\n          var nextState = _objectSpread({}, mouse, {\n            isTooltipActive: true\n          });\n\n          _this.setState(nextState);\n\n          _this.triggerSyncEvent(nextState);\n\n          if (_isFunction(onMouseEnter)) {\n            onMouseEnter(nextState, e);\n          }\n        }\n      };\n\n      _this.triggeredAfterMouseMove = function (e) {\n        var onMouseMove = _this.props.onMouseMove;\n\n        var mouse = _this.getMouseInfo(e);\n\n        var nextState = mouse ? _objectSpread({}, mouse, {\n          isTooltipActive: true\n        }) : {\n          isTooltipActive: false\n        };\n\n        _this.setState(nextState);\n\n        _this.triggerSyncEvent(nextState);\n\n        if (_isFunction(onMouseMove)) {\n          onMouseMove(nextState, e);\n        }\n      };\n\n      _this.handleItemMouseEnter = function (el) {\n        _this.setState(function () {\n          return {\n            isTooltipActive: true,\n            activeItem: el,\n            activePayload: el.tooltipPayload,\n            activeCoordinate: el.tooltipPosition || {\n              x: el.cx,\n              y: el.cy\n            }\n          };\n        });\n      };\n\n      _this.handleItemMouseLeave = function () {\n        _this.setState(function () {\n          return {\n            isTooltipActive: false\n          };\n        });\n      };\n\n      _this.handleMouseMove = function (e) {\n        if (e && _isFunction(e.persist)) {\n          e.persist();\n        }\n\n        _this.triggeredAfterMouseMove(e);\n      };\n\n      _this.handleMouseLeave = function (e) {\n        var onMouseLeave = _this.props.onMouseLeave;\n        var nextState = {\n          isTooltipActive: false\n        };\n\n        _this.setState(nextState);\n\n        _this.triggerSyncEvent(nextState);\n\n        if (_isFunction(onMouseLeave)) {\n          onMouseLeave(nextState, e);\n        }\n      };\n\n      _this.handleOuterEvent = function (e) {\n        var eventName = getReactEventByType(e);\n\n        if (eventName && _isFunction(_this.props[eventName])) {\n          var mouse = _this.getMouseInfo(e);\n\n          var handler = _this.props[eventName];\n          handler(mouse, e);\n        }\n      };\n\n      _this.handleClick = function (e) {\n        var onClick = _this.props.onClick;\n\n        if (_isFunction(onClick)) {\n          var mouse = _this.getMouseInfo(e);\n\n          onClick(mouse, e);\n        }\n      };\n\n      _this.handleMouseDown = function (e) {\n        var onMouseDown = _this.props.onMouseDown;\n\n        if (_isFunction(onMouseDown)) {\n          var mouse = _this.getMouseInfo(e);\n\n          onMouseDown(mouse, e);\n        }\n      };\n\n      _this.handleMouseUp = function (e) {\n        var onMouseUp = _this.props.onMouseUp;\n\n        if (_isFunction(onMouseUp)) {\n          var mouse = _this.getMouseInfo(e);\n\n          onMouseUp(mouse, e);\n        }\n      };\n\n      _this.handleTouchMove = function (e) {\n        if (e.changedTouches != null && e.changedTouches.length > 0) {\n          _this.handleMouseMove(e.changedTouches[0]);\n        }\n      };\n\n      _this.handleTouchStart = function (e) {\n        if (e.changedTouches != null && e.changedTouches.length > 0) {\n          _this.handleMouseDown(e.changedTouches[0]);\n        }\n      };\n\n      _this.handleTouchEnd = function (e) {\n        if (e.changedTouches != null && e.changedTouches.length > 0) {\n          _this.handleMouseUp(e.changedTouches[0]);\n        }\n      };\n\n      _this.verticalCoordinatesGenerator = function (_ref3) {\n        var xAxis = _ref3.xAxis,\n            width = _ref3.width,\n            height = _ref3.height,\n            offset = _ref3.offset;\n        return getCoordinatesOfGrid(CartesianAxis.getTicks(_objectSpread({}, CartesianAxis.defaultProps, xAxis, {\n          ticks: getTicksOfAxis(xAxis, true),\n          viewBox: {\n            x: 0,\n            y: 0,\n            width: width,\n            height: height\n          }\n        })), offset.left, offset.left + offset.width);\n      };\n\n      _this.horizontalCoordinatesGenerator = function (_ref4) {\n        var yAxis = _ref4.yAxis,\n            width = _ref4.width,\n            height = _ref4.height,\n            offset = _ref4.offset;\n        return getCoordinatesOfGrid(CartesianAxis.getTicks(_objectSpread({}, CartesianAxis.defaultProps, yAxis, {\n          ticks: getTicksOfAxis(yAxis, true),\n          viewBox: {\n            x: 0,\n            y: 0,\n            width: width,\n            height: height\n          }\n        })), offset.top, offset.top + offset.height);\n      };\n\n      _this.axesTicksGenerator = function (axis) {\n        return getTicksOfAxis(axis, true);\n      };\n\n      _this.tooltipTicksGenerator = function (axisMap) {\n        var axis = getAnyElementOfObject(axisMap);\n        var tooltipTicks = getTicksOfAxis(axis, false, true);\n        return {\n          tooltipTicks: tooltipTicks,\n          orderedTooltipTicks: _sortBy(tooltipTicks, function (o) {\n            return o.coordinate;\n          }),\n          tooltipAxis: axis,\n          tooltipAxisBandSize: getBandSizeOfAxis(axis)\n        };\n      };\n\n      _this.renderCursor = function (element) {\n        var _this$state3 = _this.state,\n            isTooltipActive = _this$state3.isTooltipActive,\n            activeCoordinate = _this$state3.activeCoordinate,\n            activePayload = _this$state3.activePayload,\n            offset = _this$state3.offset;\n\n        if (!element || !element.props.cursor || !isTooltipActive || !activeCoordinate) {\n          return null;\n        }\n\n        var layout = _this.props.layout;\n        var restProps;\n        var cursorComp = Curve;\n\n        if (chartName === 'ScatterChart') {\n          restProps = activeCoordinate;\n          cursorComp = Cross;\n        } else if (chartName === 'BarChart') {\n          restProps = _this.getCursorRectangle();\n          cursorComp = Rectangle;\n        } else if (layout === 'radial') {\n          var _this$getCursorPoints = _this.getCursorPoints(),\n              cx = _this$getCursorPoints.cx,\n              cy = _this$getCursorPoints.cy,\n              radius = _this$getCursorPoints.radius,\n              startAngle = _this$getCursorPoints.startAngle,\n              endAngle = _this$getCursorPoints.endAngle;\n\n          restProps = {\n            cx: cx,\n            cy: cy,\n            startAngle: startAngle,\n            endAngle: endAngle,\n            innerRadius: radius,\n            outerRadius: radius\n          };\n          cursorComp = Sector;\n        } else {\n          restProps = {\n            points: _this.getCursorPoints()\n          };\n          cursorComp = Curve;\n        }\n\n        var key = element.key || '_recharts-cursor';\n\n        var cursorProps = _objectSpread({\n          stroke: '#ccc',\n          pointerEvents: 'none'\n        }, offset, restProps, getPresentationAttributes(element.props.cursor), {\n          payload: activePayload,\n          key: key,\n          className: 'recharts-tooltip-cursor'\n        });\n\n        return isValidElement(element.props.cursor) ? cloneElement(element.props.cursor, cursorProps) : createElement(cursorComp, cursorProps);\n      };\n\n      _this.renderPolarAxis = function (element, displayName, index) {\n        var axisType = element.type.axisType;\n\n        var axisMap = _this.state[\"\".concat(axisType, \"Map\")];\n\n        var axisOption = axisMap[element.props[\"\".concat(axisType, \"Id\")]];\n        return cloneElement(element, _objectSpread({}, axisOption, {\n          className: axisType,\n          key: element.key || \"\".concat(displayName, \"-\").concat(index),\n          ticks: getTicksOfAxis(axisOption, true)\n        }));\n      };\n\n      _this.renderXAxis = function (element, displayName, index) {\n        var xAxisMap = _this.state.xAxisMap;\n        var axisObj = xAxisMap[element.props.xAxisId];\n        return _this.renderAxis(axisObj, element, displayName, index);\n      };\n\n      _this.renderYAxis = function (element, displayName, index) {\n        var yAxisMap = _this.state.yAxisMap;\n        var axisObj = yAxisMap[element.props.yAxisId];\n        return _this.renderAxis(axisObj, element, displayName, index);\n      };\n\n      _this.renderGrid = function (element) {\n        var _this$state4 = _this.state,\n            xAxisMap = _this$state4.xAxisMap,\n            yAxisMap = _this$state4.yAxisMap,\n            offset = _this$state4.offset;\n        var _this$props2 = _this.props,\n            width = _this$props2.width,\n            height = _this$props2.height;\n        var xAxis = getAnyElementOfObject(xAxisMap);\n\n        var yAxisWithFiniteDomain = _find(yAxisMap, function (axis) {\n          return _every(axis.domain, Number.isFinite);\n        });\n\n        var yAxis = yAxisWithFiniteDomain || getAnyElementOfObject(yAxisMap);\n        var props = element.props || {};\n        return cloneElement(element, {\n          key: element.key || 'grid',\n          x: isNumber(props.x) ? props.x : offset.left,\n          y: isNumber(props.y) ? props.y : offset.top,\n          width: isNumber(props.width) ? props.width : offset.width,\n          height: isNumber(props.height) ? props.height : offset.height,\n          xAxis: xAxis,\n          yAxis: yAxis,\n          offset: offset,\n          chartWidth: width,\n          chartHeight: height,\n          verticalCoordinatesGenerator: props.verticalCoordinatesGenerator || _this.verticalCoordinatesGenerator,\n          horizontalCoordinatesGenerator: props.horizontalCoordinatesGenerator || _this.horizontalCoordinatesGenerator\n        });\n      };\n\n      _this.renderPolarGrid = function (element) {\n        var _this$state5 = _this.state,\n            radiusAxisMap = _this$state5.radiusAxisMap,\n            angleAxisMap = _this$state5.angleAxisMap;\n        var radiusAxis = getAnyElementOfObject(radiusAxisMap);\n        var angleAxis = getAnyElementOfObject(angleAxisMap);\n        var cx = angleAxis.cx,\n            cy = angleAxis.cy,\n            innerRadius = angleAxis.innerRadius,\n            outerRadius = angleAxis.outerRadius;\n        return cloneElement(element, {\n          polarAngles: getTicksOfAxis(angleAxis, true).map(function (entry) {\n            return entry.coordinate;\n          }),\n          polarRadius: getTicksOfAxis(radiusAxis, true).map(function (entry) {\n            return entry.coordinate;\n          }),\n          cx: cx,\n          cy: cy,\n          innerRadius: innerRadius,\n          outerRadius: outerRadius,\n          key: element.key || 'polar-grid'\n        });\n      };\n\n      _this.renderBrush = function (element) {\n        var _this$props3 = _this.props,\n            margin = _this$props3.margin,\n            data = _this$props3.data;\n        var _this$state6 = _this.state,\n            offset = _this$state6.offset,\n            dataStartIndex = _this$state6.dataStartIndex,\n            dataEndIndex = _this$state6.dataEndIndex,\n            updateId = _this$state6.updateId; // TODO: update brush when children update\n\n        return cloneElement(element, {\n          key: element.key || '_recharts-brush',\n          onChange: combineEventHandlers(_this.handleBrushChange, null, element.props.onChange),\n          data: data,\n          x: isNumber(element.props.x) ? element.props.x : offset.left,\n          y: isNumber(element.props.y) ? element.props.y : offset.top + offset.height + offset.brushBottom - (margin.bottom || 0),\n          width: isNumber(element.props.width) ? element.props.width : offset.width,\n          startIndex: dataStartIndex,\n          endIndex: dataEndIndex,\n          updateId: \"brush-\".concat(updateId)\n        });\n      };\n\n      _this.renderReferenceElement = function (element, displayName, index) {\n        if (!element) {\n          return null;\n        }\n\n        var _assertThisInitialize = _assertThisInitialized(_assertThisInitialized(_this)),\n            clipPathId = _assertThisInitialize.clipPathId;\n\n        var _this$state7 = _this.state,\n            xAxisMap = _this$state7.xAxisMap,\n            yAxisMap = _this$state7.yAxisMap,\n            offset = _this$state7.offset;\n        var _element$props = element.props,\n            xAxisId = _element$props.xAxisId,\n            yAxisId = _element$props.yAxisId;\n        return cloneElement(element, {\n          key: element.key || \"\".concat(displayName, \"-\").concat(index),\n          xAxis: xAxisMap[xAxisId],\n          yAxis: yAxisMap[yAxisId],\n          viewBox: {\n            x: offset.left,\n            y: offset.top,\n            width: offset.width,\n            height: offset.height\n          },\n          clipPathId: clipPathId\n        });\n      };\n\n      _this.renderGraphicChild = function (element, displayName, index) {\n        var item = _this.filterFormatItem(element, displayName, index);\n\n        if (!item) {\n          return null;\n        }\n\n        var graphicalItem = cloneElement(element, item.props);\n        var _this$state8 = _this.state,\n            isTooltipActive = _this$state8.isTooltipActive,\n            tooltipAxis = _this$state8.tooltipAxis,\n            activeTooltipIndex = _this$state8.activeTooltipIndex,\n            activeLabel = _this$state8.activeLabel;\n        var children = _this.props.children;\n        var tooltipItem = findChildByType(children, Tooltip);\n        var _item$props = item.props,\n            points = _item$props.points,\n            isRange = _item$props.isRange,\n            baseLine = _item$props.baseLine;\n        var _item$item$props = item.item.props,\n            activeDot = _item$item$props.activeDot,\n            hide = _item$item$props.hide;\n        var hasActive = !hide && isTooltipActive && tooltipItem && activeDot && activeTooltipIndex >= 0;\n\n        if (hasActive) {\n          var activePoint, basePoint;\n\n          if (tooltipAxis.dataKey && !tooltipAxis.allowDuplicatedCategory) {\n            activePoint = findEntryInArray(points, \"payload.\".concat(tooltipAxis.dataKey), activeLabel);\n            basePoint = isRange && baseLine && findEntryInArray(baseLine, \"payload.\".concat(tooltipAxis.dataKey), activeLabel);\n          } else {\n            activePoint = points[activeTooltipIndex];\n            basePoint = isRange && baseLine && baseLine[activeTooltipIndex];\n          }\n\n          if (!_isNil(activePoint)) {\n            return [graphicalItem].concat(_toConsumableArray(_this.renderActivePoints({\n              item: item,\n              activePoint: activePoint,\n              basePoint: basePoint,\n              childIndex: activeTooltipIndex,\n              isRange: isRange\n            })));\n          }\n        }\n\n        if (isRange) {\n          return [graphicalItem, null, null];\n        }\n\n        return [graphicalItem, null];\n      };\n\n      _this.renderCustomized = function (element) {\n        return cloneElement(element, _objectSpread({}, _this.props, _this.state));\n      };\n\n      var defaultState = _this.constructor.createDefaultState(_props);\n\n      var _updateId = 0;\n      _this.state = _objectSpread({}, defaultState, {\n        updateId: 0\n      }, _this.updateStateOfAxisMapsOffsetAndStackGroups(_objectSpread({\n        props: _props\n      }, defaultState, {\n        updateId: _updateId\n      })));\n      _this.uniqueChartId = _isNil(_props.id) ? uniqueId('recharts') : _props.id;\n      _this.clipPathId = \"\".concat(_this.uniqueChartId, \"-clip\");\n\n      if (_props.throttleDelay) {\n        _this.triggeredAfterMouseMove = _throttle(_this.triggeredAfterMouseMove, _props.throttleDelay);\n      }\n\n      return _this;\n    }\n    /* eslint-disable  react/no-did-mount-set-state */\n\n\n    _createClass(CategoricalChartWrapper, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        if (!_isNil(this.props.syncId)) {\n          this.addListener();\n        }\n      }\n    }, {\n      key: \"componentWillReceiveProps\",\n      value: function componentWillReceiveProps(nextProps) {\n        var _this2 = this;\n\n        var _this$props4 = this.props,\n            data = _this$props4.data,\n            children = _this$props4.children,\n            width = _this$props4.width,\n            height = _this$props4.height,\n            layout = _this$props4.layout,\n            stackOffset = _this$props4.stackOffset,\n            margin = _this$props4.margin;\n        var updateId = this.state.updateId;\n\n        if (nextProps.data !== data || nextProps.width !== width || nextProps.height !== height || nextProps.layout !== layout || nextProps.stackOffset !== stackOffset || !shallowEqual(nextProps.margin, margin)) {\n          var defaultState = this.constructor.createDefaultState(nextProps);\n          this.setState(_objectSpread({}, defaultState, {\n            updateId: updateId + 1\n          }, this.updateStateOfAxisMapsOffsetAndStackGroups(_objectSpread({\n            props: nextProps\n          }, defaultState, {\n            updateId: updateId + 1\n          }))));\n        } else if (!isChildrenEqual(nextProps.children, children)) {\n          // update configuration in chilren\n          var hasGlobalData = !_isNil(nextProps.data);\n          var newUpdateId = hasGlobalData ? updateId : updateId + 1;\n          this.setState(function (prevState) {\n            return _objectSpread({\n              updateId: newUpdateId\n            }, _this2.updateStateOfAxisMapsOffsetAndStackGroups(_objectSpread({\n              props: nextProps\n            }, prevState, {\n              updateId: newUpdateId\n            })));\n          });\n        } // add syncId\n\n\n        if (_isNil(this.props.syncId) && !_isNil(nextProps.syncId)) {\n          this.addListener();\n        } // remove syncId\n\n\n        if (!_isNil(this.props.syncId) && _isNil(nextProps.syncId)) {\n          this.removeListener();\n        }\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        if (!_isNil(this.props.syncId)) {\n          this.removeListener();\n        }\n\n        if (typeof this.triggeredAfterMouseMove.cancel === 'function') {\n          this.triggeredAfterMouseMove.cancel();\n        }\n      }\n      /**\n      * Get the configuration of all x-axis or y-axis\n      * @param  {Object} props          Latest props\n      * @param  {String} axisType       The type of axis\n      * @param  {Array}  graphicalItems The instances of item\n      * @param  {Object} stackGroups    The items grouped by axisId and stackId\n      * @param {Number} dataStartIndex  The start index of the data series when a brush is applied\n      * @param {Number} dataEndIndex    The end index of the data series when a brush is applied\n      * @return {Object}          Configuration\n      */\n\n    }, {\n      key: \"getAxisMap\",\n      value: function getAxisMap(props, _ref5) {\n        var _ref5$axisType = _ref5.axisType,\n            axisType = _ref5$axisType === void 0 ? 'xAxis' : _ref5$axisType,\n            AxisComp = _ref5.AxisComp,\n            graphicalItems = _ref5.graphicalItems,\n            stackGroups = _ref5.stackGroups,\n            dataStartIndex = _ref5.dataStartIndex,\n            dataEndIndex = _ref5.dataEndIndex;\n        var children = props.children;\n        var axisIdKey = \"\".concat(axisType, \"Id\"); // Get all the instance of Axis\n\n        var axes = findAllByType(children, AxisComp);\n        var axisMap = {};\n\n        if (axes && axes.length) {\n          axisMap = this.getAxisMapByAxes(props, {\n            axes: axes,\n            graphicalItems: graphicalItems,\n            axisType: axisType,\n            axisIdKey: axisIdKey,\n            stackGroups: stackGroups,\n            dataStartIndex: dataStartIndex,\n            dataEndIndex: dataEndIndex\n          });\n        } else if (graphicalItems && graphicalItems.length) {\n          axisMap = this.getAxisMapByItems(props, {\n            Axis: AxisComp,\n            graphicalItems: graphicalItems,\n            axisType: axisType,\n            axisIdKey: axisIdKey,\n            stackGroups: stackGroups,\n            dataStartIndex: dataStartIndex,\n            dataEndIndex: dataEndIndex\n          });\n        }\n\n        return axisMap;\n      }\n      /**\n       * Get the configuration of axis by the options of axis instance\n       * @param  {Object} props         Latest props\n       * @param {Array}  axes           The instance of axes\n       * @param  {Array} graphicalItems The instances of item\n       * @param  {String} axisType      The type of axis, xAxis - x-axis, yAxis - y-axis\n       * @param  {String} axisIdKey     The unique id of an axis\n       * @param  {Object} stackGroups   The items grouped by axisId and stackId\n       * @param {Number} dataStartIndex The start index of the data series when a brush is applied\n       * @param {Number} dataEndIndex   The end index of the data series when a brush is applied\n       * @return {Object}      Configuration\n       */\n\n    }, {\n      key: \"getAxisMapByAxes\",\n      value: function getAxisMapByAxes(props, _ref6) {\n        var _this3 = this;\n\n        var axes = _ref6.axes,\n            graphicalItems = _ref6.graphicalItems,\n            axisType = _ref6.axisType,\n            axisIdKey = _ref6.axisIdKey,\n            stackGroups = _ref6.stackGroups,\n            dataStartIndex = _ref6.dataStartIndex,\n            dataEndIndex = _ref6.dataEndIndex;\n        var layout = props.layout,\n            children = props.children,\n            stackOffset = props.stackOffset;\n        var isCategorial = isCategorialAxis(layout, axisType); // Eliminate duplicated axes\n\n        var axisMap = axes.reduce(function (result, child) {\n          var _child$props = child.props,\n              type = _child$props.type,\n              dataKey = _child$props.dataKey,\n              allowDataOverflow = _child$props.allowDataOverflow,\n              allowDuplicatedCategory = _child$props.allowDuplicatedCategory,\n              scale = _child$props.scale,\n              ticks = _child$props.ticks;\n          var axisId = child.props[axisIdKey];\n\n          var displayedData = _this3.constructor.getDisplayedData(props, {\n            graphicalItems: graphicalItems.filter(function (item) {\n              return item.props[axisIdKey] === axisId;\n            }),\n            dataStartIndex: dataStartIndex,\n            dataEndIndex: dataEndIndex\n          });\n\n          var len = displayedData.length;\n\n          if (!result[axisId]) {\n            var domain, duplicateDomain, categoricalDomain;\n\n            if (dataKey) {\n              domain = getDomainOfDataByKey(displayedData, dataKey, type);\n\n              if (type === 'category' && isCategorial) {\n                var duplicate = hasDuplicate(domain);\n\n                if (allowDuplicatedCategory && duplicate) {\n                  duplicateDomain = domain; // When category axis has duplicated text, serial numbers are used to generate scale\n\n                  domain = _range(0, len);\n                } else if (!allowDuplicatedCategory) {\n                  // remove duplicated category\n                  domain = parseDomainOfCategoryAxis(child.props.domain, domain, child).reduce(function (finalDomain, entry) {\n                    return finalDomain.indexOf(entry) >= 0 ? finalDomain : _toConsumableArray(finalDomain).concat([entry]);\n                  }, []);\n                }\n              } else if (type === 'category') {\n                if (!allowDuplicatedCategory) {\n                  domain = parseDomainOfCategoryAxis(child.props.domain, domain, child).reduce(function (finalDomain, entry) {\n                    return finalDomain.indexOf(entry) >= 0 || entry === '' || _isNil(entry) ? finalDomain : _toConsumableArray(finalDomain).concat([entry]);\n                  }, []);\n                } else {\n                  // eliminate undefined or null or empty string\n                  domain = domain.filter(function (entry) {\n                    return entry !== '' && !_isNil(entry);\n                  });\n                }\n              } else if (type === 'number') {\n                var errorBarsDomain = parseErrorBarsOfAxis(displayedData, graphicalItems.filter(function (item) {\n                  return item.props[axisIdKey] === axisId && !item.props.hide;\n                }), dataKey, axisType);\n\n                if (errorBarsDomain) {\n                  domain = errorBarsDomain;\n                }\n              }\n\n              if (isCategorial && (type === 'number' || scale !== 'auto')) {\n                categoricalDomain = getDomainOfDataByKey(displayedData, dataKey, 'category');\n              }\n            } else if (isCategorial) {\n              domain = _range(0, len);\n            } else if (stackGroups && stackGroups[axisId] && stackGroups[axisId].hasStack && type === 'number') {\n              // when stackOffset is 'expand', the domain may be calculated as [0, 1.000000000002]\n              domain = stackOffset === 'expand' ? [0, 1] : getDomainOfStackGroups(stackGroups[axisId].stackGroups, dataStartIndex, dataEndIndex);\n            } else {\n              domain = getDomainOfItemsWithSameAxis(displayedData, graphicalItems.filter(function (item) {\n                return item.props[axisIdKey] === axisId && !item.props.hide;\n              }), type, true);\n            }\n\n            if (type === 'number') {\n              // To detect wether there is any reference lines whose props alwaysShow is true\n              domain = detectReferenceElementsDomain(children, domain, axisId, axisType, ticks);\n\n              if (child.props.domain) {\n                domain = parseSpecifiedDomain(child.props.domain, domain, allowDataOverflow);\n              }\n            }\n\n            return _objectSpread({}, result, _defineProperty({}, axisId, _objectSpread({}, child.props, {\n              axisType: axisType,\n              domain: domain,\n              categoricalDomain: categoricalDomain,\n              duplicateDomain: duplicateDomain,\n              originalDomain: child.props.domain,\n              isCategorial: isCategorial,\n              layout: layout\n            })));\n          }\n\n          return result;\n        }, {});\n        return axisMap;\n      }\n      /**\n       * Get the configuration of axis by the options of item,\n       * this kind of axis does not display in chart\n       * @param  {Object} props         Latest props\n       * @param  {Array} graphicalItems The instances of item\n       * @param  {ReactElement} Axis    Axis Component\n       * @param  {String} axisType      The type of axis, xAxis - x-axis, yAxis - y-axis\n       * @param  {String} axisIdKey     The unique id of an axis\n       * @param  {Object} stackGroups   The items grouped by axisId and stackId\n       * @param {Number} dataStartIndex The start index of the data series when a brush is applied\n       * @param {Number} dataEndIndex   The end index of the data series when a brush is applied\n       * @return {Object}               Configuration\n       */\n\n    }, {\n      key: \"getAxisMapByItems\",\n      value: function getAxisMapByItems(props, _ref7) {\n        var graphicalItems = _ref7.graphicalItems,\n            Axis = _ref7.Axis,\n            axisType = _ref7.axisType,\n            axisIdKey = _ref7.axisIdKey,\n            stackGroups = _ref7.stackGroups,\n            dataStartIndex = _ref7.dataStartIndex,\n            dataEndIndex = _ref7.dataEndIndex;\n        var layout = props.layout,\n            children = props.children;\n        var displayedData = this.constructor.getDisplayedData(props, {\n          graphicalItems: graphicalItems,\n          dataStartIndex: dataStartIndex,\n          dataEndIndex: dataEndIndex\n        });\n        var len = displayedData.length;\n        var isCategorial = isCategorialAxis(layout, axisType);\n        var index = -1; // The default type of x-axis is category axis,\n        // The default contents of x-axis is the serial numbers of data\n        // The default type of y-axis is number axis\n        // The default contents of y-axis is the domain of data\n\n        var axisMap = graphicalItems.reduce(function (result, child) {\n          var axisId = child.props[axisIdKey];\n\n          if (!result[axisId]) {\n            index++;\n            var domain;\n\n            if (isCategorial) {\n              domain = _range(0, len);\n            } else if (stackGroups && stackGroups[axisId] && stackGroups[axisId].hasStack) {\n              domain = getDomainOfStackGroups(stackGroups[axisId].stackGroups, dataStartIndex, dataEndIndex);\n              domain = detectReferenceElementsDomain(children, domain, axisId, axisType);\n            } else {\n              domain = parseSpecifiedDomain(Axis.defaultProps.domain, getDomainOfItemsWithSameAxis(displayedData, graphicalItems.filter(function (item) {\n                return item.props[axisIdKey] === axisId && !item.props.hide;\n              }), 'number'), Axis.defaultProps.allowDataOverflow);\n              domain = detectReferenceElementsDomain(children, domain, axisId, axisType);\n            }\n\n            return _objectSpread({}, result, _defineProperty({}, axisId, _objectSpread({\n              axisType: axisType\n            }, Axis.defaultProps, {\n              hide: true,\n              orientation: ORIENT_MAP[axisType] && ORIENT_MAP[axisType][index % 2],\n              domain: domain,\n              originalDomain: Axis.defaultProps.domain,\n              isCategorial: isCategorial,\n              layout: layout // specify scale when no Axis\n              // scale: isCategorial ? 'band' : 'linear',\n\n            })));\n          }\n\n          return result;\n        }, {});\n        return axisMap;\n      }\n    }, {\n      key: \"getActiveCoordinate\",\n      value: function getActiveCoordinate(tooltipTicks, activeIndex, rangeObj) {\n        var layout = this.props.layout;\n        var entry = tooltipTicks.find(function (tick) {\n          return tick && tick.index === activeIndex;\n        });\n\n        if (entry) {\n          if (layout === 'horizontal') {\n            return {\n              x: entry.coordinate,\n              y: rangeObj.y\n            };\n          }\n\n          if (layout === 'vertical') {\n            return {\n              x: rangeObj.x,\n              y: entry.coordinate\n            };\n          }\n\n          if (layout === 'centric') {\n            var _angle = entry.coordinate;\n            var _radius = rangeObj.radius;\n            return _objectSpread({}, rangeObj, polarToCartesian(rangeObj.cx, rangeObj.cy, _radius, _angle), {\n              angle: _angle,\n              radius: _radius\n            });\n          }\n\n          var radius = entry.coordinate;\n          var angle = rangeObj.angle;\n          return _objectSpread({}, rangeObj, polarToCartesian(rangeObj.cx, rangeObj.cy, radius, angle), {\n            angle: angle,\n            radius: radius\n          });\n        }\n\n        return originCoordinate;\n      }\n      /**\n       * Get the information of mouse in chart, return null when the mouse is not in the chart\n       * @param  {Object} event    The event object\n       * @return {Object}          Mouse data\n       */\n\n    }, {\n      key: \"getMouseInfo\",\n      value: function getMouseInfo(event) {\n        if (!this.container) {\n          return null;\n        }\n\n        var containerOffset = getOffset(this.container);\n        var e = calculateChartCoordinate(event, containerOffset);\n        var rangeObj = this.inRange(e.chartX, e.chartY);\n\n        if (!rangeObj) {\n          return null;\n        }\n\n        var _this$state9 = this.state,\n            xAxisMap = _this$state9.xAxisMap,\n            yAxisMap = _this$state9.yAxisMap;\n\n        if (eventType !== 'axis' && xAxisMap && yAxisMap) {\n          var xScale = getAnyElementOfObject(xAxisMap).scale;\n          var yScale = getAnyElementOfObject(yAxisMap).scale;\n          var xValue = xScale && xScale.invert ? xScale.invert(e.chartX) : null;\n          var yValue = yScale && yScale.invert ? yScale.invert(e.chartY) : null;\n          return _objectSpread({}, e, {\n            xValue: xValue,\n            yValue: yValue\n          });\n        }\n\n        var _this$state10 = this.state,\n            ticks = _this$state10.orderedTooltipTicks,\n            axis = _this$state10.tooltipAxis,\n            tooltipTicks = _this$state10.tooltipTicks;\n        var pos = this.calculateTooltipPos(rangeObj);\n        var activeIndex = calculateActiveTickIndex(pos, ticks, tooltipTicks, axis);\n\n        if (activeIndex >= 0 && tooltipTicks) {\n          var activeLabel = tooltipTicks[activeIndex] && tooltipTicks[activeIndex].value;\n          var activePayload = this.getTooltipContent(activeIndex, activeLabel);\n          var activeCoordinate = this.getActiveCoordinate(ticks, activeIndex, rangeObj);\n          return _objectSpread({}, e, {\n            activeTooltipIndex: activeIndex,\n            activeLabel: activeLabel,\n            activePayload: activePayload,\n            activeCoordinate: activeCoordinate\n          });\n        }\n\n        return null;\n      }\n      /**\n       * Get the content to be displayed in the tooltip\n       * @param  {Number} activeIndex    Active index of data\n       * @param  {String} activeLabel    Active label of data\n       * @return {Array}                 The content of tooltip\n       */\n\n    }, {\n      key: \"getTooltipContent\",\n      value: function getTooltipContent(activeIndex, activeLabel) {\n        var _this$state11 = this.state,\n            graphicalItems = _this$state11.graphicalItems,\n            tooltipAxis = _this$state11.tooltipAxis;\n        var displayedData = this.constructor.getDisplayedData(this.props, this.state);\n\n        if (activeIndex < 0 || !graphicalItems || !graphicalItems.length || activeIndex >= displayedData.length) {\n          return null;\n        } // get data by activeIndex when the axis don't allow duplicated category\n\n\n        return graphicalItems.reduce(function (result, child) {\n          var hide = child.props.hide;\n\n          if (hide) {\n            return result;\n          }\n\n          var _child$props2 = child.props,\n              dataKey = _child$props2.dataKey,\n              name = _child$props2.name,\n              unit = _child$props2.unit,\n              formatter = _child$props2.formatter,\n              data = _child$props2.data,\n              tooltipType = _child$props2.tooltipType;\n          var payload;\n\n          if (tooltipAxis.dataKey && !tooltipAxis.allowDuplicatedCategory) {\n            // graphic child has data props\n            payload = findEntryInArray(data || displayedData, tooltipAxis.dataKey, activeLabel);\n          } else {\n            payload = displayedData[activeIndex];\n          }\n\n          if (!payload) {\n            return result;\n          }\n\n          return _toConsumableArray(result).concat([_objectSpread({}, getPresentationAttributes(child), {\n            dataKey: dataKey,\n            unit: unit,\n            formatter: formatter,\n            name: name || dataKey,\n            color: getMainColorOfGraphicItem(child),\n            value: getValueByDataKey(payload, dataKey),\n            type: tooltipType,\n            payload: payload\n          })]);\n        }, []);\n      }\n    }, {\n      key: \"getFormatItems\",\n      value: function getFormatItems(props, currentState) {\n        var _this4 = this;\n\n        var graphicalItems = currentState.graphicalItems,\n            stackGroups = currentState.stackGroups,\n            offset = currentState.offset,\n            updateId = currentState.updateId,\n            dataStartIndex = currentState.dataStartIndex,\n            dataEndIndex = currentState.dataEndIndex;\n        var barSize = props.barSize,\n            layout = props.layout,\n            barGap = props.barGap,\n            barCategoryGap = props.barCategoryGap,\n            globalMaxBarSize = props.maxBarSize;\n\n        var _this$constructor$get = this.constructor.getAxisNameByLayout(layout),\n            numericAxisName = _this$constructor$get.numericAxisName,\n            cateAxisName = _this$constructor$get.cateAxisName;\n\n        var hasBar = this.constructor.hasBar(graphicalItems);\n        var sizeList = hasBar && getBarSizeList({\n          barSize: barSize,\n          stackGroups: stackGroups\n        });\n        var formatedItems = [];\n        graphicalItems.forEach(function (item, index) {\n          var displayedData = _this4.constructor.getDisplayedData(props, {\n            dataStartIndex: dataStartIndex,\n            dataEndIndex: dataEndIndex\n          }, item);\n\n          var _item$props2 = item.props,\n              dataKey = _item$props2.dataKey,\n              childMaxBarSize = _item$props2.maxBarSize;\n          var numericAxisId = item.props[\"\".concat(numericAxisName, \"Id\")];\n          var cateAxisId = item.props[\"\".concat(cateAxisName, \"Id\")];\n          var axisObj = axisComponents.reduce(function (result, entry) {\n            var _objectSpread4;\n\n            var axisMap = currentState[\"\".concat(entry.axisType, \"Map\")];\n            var id = item.props[\"\".concat(entry.axisType, \"Id\")];\n            var axis = axisMap && axisMap[id];\n            return _objectSpread({}, result, (_objectSpread4 = {}, _defineProperty(_objectSpread4, entry.axisType, axis), _defineProperty(_objectSpread4, \"\".concat(entry.axisType, \"Ticks\"), getTicksOfAxis(axis)), _objectSpread4));\n          }, {});\n          var cateAxis = axisObj[cateAxisName];\n          var cateTicks = axisObj[\"\".concat(cateAxisName, \"Ticks\")];\n          var stackedData = stackGroups && stackGroups[numericAxisId] && stackGroups[numericAxisId].hasStack && getStackedDataOfItem(item, stackGroups[numericAxisId].stackGroups);\n          var bandSize = getBandSizeOfAxis(cateAxis, cateTicks);\n          var maxBarSize = _isNil(childMaxBarSize) ? globalMaxBarSize : childMaxBarSize;\n          var barPosition = hasBar && getBarPosition({\n            barGap: barGap,\n            barCategoryGap: barCategoryGap,\n            bandSize: bandSize,\n            sizeList: sizeList[cateAxisId],\n            maxBarSize: maxBarSize\n          });\n          var componsedFn = item && item.type && item.type.getComposedData;\n\n          if (componsedFn) {\n            var _objectSpread5;\n\n            formatedItems.push({\n              props: _objectSpread({}, componsedFn(_objectSpread({}, axisObj, {\n                displayedData: displayedData,\n                props: props,\n                dataKey: dataKey,\n                item: item,\n                bandSize: bandSize,\n                barPosition: barPosition,\n                offset: offset,\n                stackedData: stackedData,\n                layout: layout,\n                dataStartIndex: dataStartIndex,\n                dataEndIndex: dataEndIndex,\n                onItemMouseLeave: combineEventHandlers(_this4.handleItemMouseLeave, null, item.props.onMouseLeave),\n                onItemMouseEnter: combineEventHandlers(_this4.handleItemMouseEnter, null, item.props.onMouseEnter)\n              })), (_objectSpread5 = {\n                key: item.key || \"item-\".concat(index)\n              }, _defineProperty(_objectSpread5, numericAxisName, axisObj[numericAxisName]), _defineProperty(_objectSpread5, cateAxisName, axisObj[cateAxisName]), _defineProperty(_objectSpread5, \"animationId\", updateId), _objectSpread5)),\n              childIndex: parseChildIndex(item, props.children),\n              item: item\n            });\n          }\n        });\n        return formatedItems;\n      }\n    }, {\n      key: \"getCursorRectangle\",\n      value: function getCursorRectangle() {\n        var layout = this.props.layout;\n        var _this$state12 = this.state,\n            activeCoordinate = _this$state12.activeCoordinate,\n            offset = _this$state12.offset,\n            tooltipAxisBandSize = _this$state12.tooltipAxisBandSize;\n        var halfSize = tooltipAxisBandSize / 2;\n        return {\n          stroke: 'none',\n          fill: '#ccc',\n          x: layout === 'horizontal' ? activeCoordinate.x - halfSize : offset.left + 0.5,\n          y: layout === 'horizontal' ? offset.top + 0.5 : activeCoordinate.y - halfSize,\n          width: layout === 'horizontal' ? tooltipAxisBandSize : offset.width - 1,\n          height: layout === 'horizontal' ? offset.height - 1 : tooltipAxisBandSize\n        };\n      }\n    }, {\n      key: \"getCursorPoints\",\n      value: function getCursorPoints() {\n        var layout = this.props.layout;\n        var _this$state13 = this.state,\n            activeCoordinate = _this$state13.activeCoordinate,\n            offset = _this$state13.offset;\n        var x1, y1, x2, y2;\n\n        if (layout === 'horizontal') {\n          x1 = activeCoordinate.x;\n          x2 = x1;\n          y1 = offset.top;\n          y2 = offset.top + offset.height;\n        } else if (layout === 'vertical') {\n          y1 = activeCoordinate.y;\n          y2 = y1;\n          x1 = offset.left;\n          x2 = offset.left + offset.width;\n        } else if (!_isNil(activeCoordinate.cx) || !_isNil(activeCoordinate.cy)) {\n          if (layout === 'centric') {\n            var cx = activeCoordinate.cx,\n                cy = activeCoordinate.cy,\n                innerRadius = activeCoordinate.innerRadius,\n                outerRadius = activeCoordinate.outerRadius,\n                angle = activeCoordinate.angle;\n            var innerPoint = polarToCartesian(cx, cy, innerRadius, angle);\n            var outerPoint = polarToCartesian(cx, cy, outerRadius, angle);\n            x1 = innerPoint.x;\n            y1 = innerPoint.y;\n            x2 = outerPoint.x;\n            y2 = outerPoint.y;\n          } else {\n            var _cx = activeCoordinate.cx,\n                _cy = activeCoordinate.cy,\n                radius = activeCoordinate.radius,\n                startAngle = activeCoordinate.startAngle,\n                endAngle = activeCoordinate.endAngle;\n            var startPoint = polarToCartesian(_cx, _cy, radius, startAngle);\n            var endPoint = polarToCartesian(_cx, _cy, radius, endAngle);\n            return {\n              points: [startPoint, endPoint],\n              cx: _cx,\n              cy: _cy,\n              radius: radius,\n              startAngle: startAngle,\n              endAngle: endAngle\n            };\n          }\n        }\n\n        return [{\n          x: x1,\n          y: y1\n        }, {\n          x: x2,\n          y: y2\n        }];\n      }\n    }, {\n      key: \"calculateTooltipPos\",\n      value: function calculateTooltipPos(rangeObj) {\n        var layout = this.props.layout;\n\n        if (layout === 'horizontal') {\n          return rangeObj.x;\n        }\n\n        if (layout === 'vertical') {\n          return rangeObj.y;\n        }\n\n        if (layout === 'centric') {\n          return rangeObj.angle;\n        }\n\n        return rangeObj.radius;\n      }\n    }, {\n      key: \"inRange\",\n      value: function inRange(x, y) {\n        var layout = this.props.layout;\n\n        if (layout === 'horizontal' || layout === 'vertical') {\n          var offset = this.state.offset;\n          var isInRange = x >= offset.left && x <= offset.left + offset.width && y >= offset.top && y <= offset.top + offset.height;\n          return isInRange ? {\n            x: x,\n            y: y\n          } : null;\n        }\n\n        var _this$state14 = this.state,\n            angleAxisMap = _this$state14.angleAxisMap,\n            radiusAxisMap = _this$state14.radiusAxisMap;\n\n        if (angleAxisMap && radiusAxisMap) {\n          var angleAxis = getAnyElementOfObject(angleAxisMap);\n          return inRangeOfSector({\n            x: x,\n            y: y\n          }, angleAxis);\n        }\n\n        return null;\n      }\n    }, {\n      key: \"parseEventsOfWrapper\",\n      value: function parseEventsOfWrapper() {\n        var children = this.props.children;\n        var tooltipItem = findChildByType(children, Tooltip);\n        var tooltipEvents = tooltipItem && eventType === 'axis' ? {\n          onMouseEnter: this.handleMouseEnter,\n          onMouseMove: this.handleMouseMove,\n          onMouseLeave: this.handleMouseLeave,\n          onTouchMove: this.handleTouchMove,\n          onTouchStart: this.handleTouchStart,\n          onTouchEnd: this.handleTouchEnd\n        } : {};\n        var outerEvents = filterEventAttributes(this.props, this.handleOuterEvent);\n        return _objectSpread({}, outerEvents, tooltipEvents);\n      }\n      /**\n       * The AxisMaps are expensive to render on large data sets\n       * so provide the ability to store them in state and only update them when necessary\n       * they are dependent upon the start and end index of\n       * the brush so it's important that this method is called _after_\n       * the state is updated with any new start/end indices\n       *\n       * @param {Object} props          The props object to be used for updating the axismaps\n       * @param {Number} dataStartIndex The start index of the data series when a brush is applied\n       * @param {Number} dataEndIndex   The end index of the data series when a brush is applied\n       * @param {Number} updateId       The update id\n       * @return {Object} state New state to set\n       */\n\n    }, {\n      key: \"updateStateOfAxisMapsOffsetAndStackGroups\",\n      value: function updateStateOfAxisMapsOffsetAndStackGroups(_ref8) {\n        var _this5 = this;\n\n        var props = _ref8.props,\n            dataStartIndex = _ref8.dataStartIndex,\n            dataEndIndex = _ref8.dataEndIndex,\n            updateId = _ref8.updateId;\n\n        if (!validateWidthHeight({\n          props: props\n        })) {\n          return null;\n        }\n\n        var children = props.children,\n            layout = props.layout,\n            stackOffset = props.stackOffset,\n            data = props.data,\n            reverseStackOrder = props.reverseStackOrder;\n\n        var _this$constructor$get2 = this.constructor.getAxisNameByLayout(layout),\n            numericAxisName = _this$constructor$get2.numericAxisName,\n            cateAxisName = _this$constructor$get2.cateAxisName;\n\n        var graphicalItems = findAllByType(children, GraphicalChild);\n        var stackGroups = getStackGroupsByAxisId(data, graphicalItems, \"\".concat(numericAxisName, \"Id\"), \"\".concat(cateAxisName, \"Id\"), stackOffset, reverseStackOrder);\n        var axisObj = axisComponents.reduce(function (result, entry) {\n          var name = \"\".concat(entry.axisType, \"Map\");\n          return _objectSpread({}, result, _defineProperty({}, name, _this5.getAxisMap(props, _objectSpread({}, entry, {\n            graphicalItems: graphicalItems,\n            stackGroups: entry.axisType === numericAxisName && stackGroups,\n            dataStartIndex: dataStartIndex,\n            dataEndIndex: dataEndIndex\n          }))));\n        }, {});\n        var offset = this.calculateOffset(_objectSpread({}, axisObj, {\n          props: props,\n          graphicalItems: graphicalItems\n        }));\n        Object.keys(axisObj).forEach(function (key) {\n          axisObj[key] = formatAxisMap(props, axisObj[key], offset, key.replace('Map', ''), chartName);\n        });\n        var cateAxisMap = axisObj[\"\".concat(cateAxisName, \"Map\")];\n        var ticksObj = this.tooltipTicksGenerator(cateAxisMap);\n        var formatedGraphicalItems = this.getFormatItems(props, _objectSpread({}, axisObj, {\n          dataStartIndex: dataStartIndex,\n          dataEndIndex: dataEndIndex,\n          updateId: updateId,\n          graphicalItems: graphicalItems,\n          stackGroups: stackGroups,\n          offset: offset\n        }));\n        return _objectSpread({\n          formatedGraphicalItems: formatedGraphicalItems,\n          graphicalItems: graphicalItems,\n          offset: offset,\n          stackGroups: stackGroups\n        }, ticksObj, axisObj);\n      }\n      /* eslint-disable  no-underscore-dangle */\n\n    }, {\n      key: \"addListener\",\n      value: function addListener() {\n        eventCenter.on(SYNC_EVENT, this.handleReceiveSyncEvent);\n\n        if (eventCenter.setMaxListeners && eventCenter._maxListeners) {\n          eventCenter.setMaxListeners(eventCenter._maxListeners + 1);\n        }\n      }\n    }, {\n      key: \"removeListener\",\n      value: function removeListener() {\n        eventCenter.removeListener(SYNC_EVENT, this.handleReceiveSyncEvent);\n\n        if (eventCenter.setMaxListeners && eventCenter._maxListeners) {\n          eventCenter.setMaxListeners(eventCenter._maxListeners - 1);\n        }\n      }\n      /**\n       * Calculate the offset of main part in the svg element\n       * @param  {Object} props          Latest props\n       * @param  {Array}  graphicalItems The instances of item\n       * @param  {Object} xAxisMap       The configuration of x-axis\n       * @param  {Object} yAxisMap       The configuration of y-axis\n       * @return {Object} The offset of main part in the svg element\n       */\n\n    }, {\n      key: \"calculateOffset\",\n      value: function calculateOffset(_ref9) {\n        var props = _ref9.props,\n            graphicalItems = _ref9.graphicalItems,\n            _ref9$xAxisMap = _ref9.xAxisMap,\n            xAxisMap = _ref9$xAxisMap === void 0 ? {} : _ref9$xAxisMap,\n            _ref9$yAxisMap = _ref9.yAxisMap,\n            yAxisMap = _ref9$yAxisMap === void 0 ? {} : _ref9$yAxisMap;\n        var width = props.width,\n            height = props.height,\n            children = props.children;\n        var margin = props.margin || {};\n        var brushItem = findChildByType(children, Brush);\n        var legendItem = findChildByType(children, Legend);\n        var offsetH = Object.keys(yAxisMap).reduce(function (result, id) {\n          var entry = yAxisMap[id];\n          var orientation = entry.orientation;\n\n          if (!entry.mirror && !entry.hide) {\n            return _objectSpread({}, result, _defineProperty({}, orientation, result[orientation] + entry.width));\n          }\n\n          return result;\n        }, {\n          left: margin.left || 0,\n          right: margin.right || 0\n        });\n        var offsetV = Object.keys(xAxisMap).reduce(function (result, id) {\n          var entry = xAxisMap[id];\n          var orientation = entry.orientation;\n\n          if (!entry.mirror && !entry.hide) {\n            return _objectSpread({}, result, _defineProperty({}, orientation, result[orientation] + entry.height));\n          }\n\n          return result;\n        }, {\n          top: margin.top || 0,\n          bottom: margin.bottom || 0\n        });\n\n        var offset = _objectSpread({}, offsetV, offsetH);\n\n        var brushBottom = offset.bottom;\n\n        if (brushItem) {\n          offset.bottom += brushItem.props.height || Brush.defaultProps.height;\n        }\n\n        if (legendItem && this.legendInstance) {\n          var legendBox = this.legendInstance.getBBox();\n          offset = appendOffsetOfLegend(offset, graphicalItems, props, legendBox);\n        }\n\n        return _objectSpread({\n          brushBottom: brushBottom\n        }, offset, {\n          width: width - offset.left - offset.right,\n          height: height - offset.top - offset.bottom\n        });\n      }\n    }, {\n      key: \"triggerSyncEvent\",\n      value: function triggerSyncEvent(data) {\n        var syncId = this.props.syncId;\n\n        if (!_isNil(syncId)) {\n          eventCenter.emit(SYNC_EVENT, syncId, this.uniqueChartId, data);\n        }\n      }\n    }, {\n      key: \"filterFormatItem\",\n      value: function filterFormatItem(item, displayName, childIndex) {\n        var formatedGraphicalItems = this.state.formatedGraphicalItems;\n\n        for (var i = 0, len = formatedGraphicalItems.length; i < len; i++) {\n          var entry = formatedGraphicalItems[i];\n\n          if (entry.item === item || entry.props.key === item.key || displayName === getDisplayName(entry.item.type) && childIndex === entry.childIndex) {\n            return entry;\n          }\n        }\n\n        return null;\n      }\n    }, {\n      key: \"renderAxis\",\n\n      /**\n       * Draw axis\n       * @param {Object} axisOptions The options of axis\n       * @param {Object} element      The axis element\n       * @param {String} displayName  The display name of axis\n       * @param {Number} index        The index of element\n       * @return {ReactElement}       The instance of x-axes\n       */\n      value: function renderAxis(axisOptions, element, displayName, index) {\n        var _this$props5 = this.props,\n            width = _this$props5.width,\n            height = _this$props5.height;\n        return React.createElement(CartesianAxis, _extends({}, axisOptions, {\n          className: \"recharts-\".concat(axisOptions.axisType, \" \").concat(axisOptions.axisType),\n          key: element.key || \"\".concat(displayName, \"-\").concat(index),\n          viewBox: {\n            x: 0,\n            y: 0,\n            width: width,\n            height: height\n          },\n          ticksGenerator: this.axesTicksGenerator\n        }));\n      }\n      /**\n       * Draw grid\n       * @param  {ReactElement} element the grid item\n       * @return {ReactElement} The instance of grid\n       */\n\n    }, {\n      key: \"renderLegend\",\n\n      /**\n       * Draw legend\n       * @return {ReactElement}            The instance of Legend\n       */\n      value: function renderLegend() {\n        var _this6 = this;\n\n        var formatedGraphicalItems = this.state.formatedGraphicalItems;\n        var _this$props6 = this.props,\n            children = _this$props6.children,\n            width = _this$props6.width,\n            height = _this$props6.height;\n        var margin = this.props.margin || {};\n        var legendWidth = width - (margin.left || 0) - (margin.right || 0);\n        var legendHeight = height - (margin.top || 0) - (margin.bottom || 0);\n        var props = getLegendProps({\n          children: children,\n          formatedGraphicalItems: formatedGraphicalItems,\n          legendWidth: legendWidth,\n          legendHeight: legendHeight,\n          legendContent: legendContent\n        });\n\n        if (!props) {\n          return null;\n        }\n\n        var item = props.item,\n            otherProps = _objectWithoutProperties(props, [\"item\"]);\n\n        return cloneElement(item, _objectSpread({}, otherProps, {\n          chartWidth: width,\n          chartHeight: height,\n          margin: margin,\n          ref: function ref(legend) {\n            _this6.legendInstance = legend;\n          },\n          onBBoxUpdate: this.handleLegendBBoxUpdate\n        }));\n      }\n      /**\n       * Draw Tooltip\n       * @return {ReactElement}  The instance of Tooltip\n       */\n\n    }, {\n      key: \"renderTooltip\",\n      value: function renderTooltip() {\n        var children = this.props.children;\n        var tooltipItem = findChildByType(children, Tooltip);\n\n        if (!tooltipItem) {\n          return null;\n        }\n\n        var _this$state15 = this.state,\n            isTooltipActive = _this$state15.isTooltipActive,\n            activeCoordinate = _this$state15.activeCoordinate,\n            activePayload = _this$state15.activePayload,\n            activeLabel = _this$state15.activeLabel,\n            offset = _this$state15.offset;\n        return cloneElement(tooltipItem, {\n          viewBox: _objectSpread({}, offset, {\n            x: offset.left,\n            y: offset.top\n          }),\n          active: isTooltipActive,\n          label: activeLabel,\n          payload: isTooltipActive ? activePayload : [],\n          coordinate: activeCoordinate\n        });\n      }\n    }, {\n      key: \"renderActivePoints\",\n      value: function renderActivePoints(_ref10) {\n        var item = _ref10.item,\n            activePoint = _ref10.activePoint,\n            basePoint = _ref10.basePoint,\n            childIndex = _ref10.childIndex,\n            isRange = _ref10.isRange;\n        var result = [];\n        var key = item.props.key;\n        var _item$item$props2 = item.item.props,\n            activeDot = _item$item$props2.activeDot,\n            dataKey = _item$item$props2.dataKey;\n\n        var dotProps = _objectSpread({\n          index: childIndex,\n          dataKey: dataKey,\n          cx: activePoint.x,\n          cy: activePoint.y,\n          r: 4,\n          fill: getMainColorOfGraphicItem(item.item),\n          strokeWidth: 2,\n          stroke: '#fff',\n          payload: activePoint.payload,\n          value: activePoint.value,\n          key: \"\".concat(key, \"-activePoint-\").concat(childIndex)\n        }, getPresentationAttributes(activeDot), filterEventAttributes(activeDot));\n\n        result.push(this.constructor.renderActiveDot(activeDot, dotProps, childIndex));\n\n        if (basePoint) {\n          result.push(this.constructor.renderActiveDot(activeDot, _objectSpread({}, dotProps, {\n            cx: basePoint.x,\n            cy: basePoint.y,\n            key: \"\".concat(key, \"-basePoint-\").concat(childIndex)\n          }), childIndex));\n        } else if (isRange) {\n          result.push(null);\n        }\n\n        return result;\n      }\n    }, {\n      key: \"renderClipPath\",\n      value: function renderClipPath() {\n        var clipPathId = this.clipPathId;\n        var _this$state$offset = this.state.offset,\n            left = _this$state$offset.left,\n            top = _this$state$offset.top,\n            height = _this$state$offset.height,\n            width = _this$state$offset.width;\n        return React.createElement(\"defs\", null, React.createElement(\"clipPath\", {\n          id: clipPathId\n        }, React.createElement(\"rect\", {\n          x: left,\n          y: top,\n          height: height,\n          width: width\n        })));\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this7 = this;\n\n        if (!validateWidthHeight(this)) {\n          return null;\n        }\n\n        var _this$props7 = this.props,\n            children = _this$props7.children,\n            className = _this$props7.className,\n            width = _this$props7.width,\n            height = _this$props7.height,\n            style = _this$props7.style,\n            compact = _this$props7.compact,\n            others = _objectWithoutProperties(_this$props7, [\"children\", \"className\", \"width\", \"height\", \"style\", \"compact\"]);\n\n        var attrs = getPresentationAttributes(others);\n        var map = {\n          CartesianGrid: {\n            handler: this.renderGrid,\n            once: true\n          },\n          ReferenceArea: {\n            handler: this.renderReferenceElement\n          },\n          ReferenceLine: {\n            handler: this.renderReferenceElement\n          },\n          ReferenceDot: {\n            handler: this.renderReferenceElement\n          },\n          XAxis: {\n            handler: this.renderXAxis\n          },\n          YAxis: {\n            handler: this.renderYAxis\n          },\n          Brush: {\n            handler: this.renderBrush,\n            once: true\n          },\n          Bar: {\n            handler: this.renderGraphicChild\n          },\n          Line: {\n            handler: this.renderGraphicChild\n          },\n          Area: {\n            handler: this.renderGraphicChild\n          },\n          Radar: {\n            handler: this.renderGraphicChild\n          },\n          RadialBar: {\n            handler: this.renderGraphicChild\n          },\n          Scatter: {\n            handler: this.renderGraphicChild\n          },\n          Pie: {\n            handler: this.renderGraphicChild\n          },\n          Funnel: {\n            handler: this.renderGraphicChild\n          },\n          Tooltip: {\n            handler: this.renderCursor,\n            once: true\n          },\n          PolarGrid: {\n            handler: this.renderPolarGrid,\n            once: true\n          },\n          PolarAngleAxis: {\n            handler: this.renderPolarAxis\n          },\n          PolarRadiusAxis: {\n            handler: this.renderPolarAxis\n          },\n          Customized: {\n            handler: this.renderCustomized\n          }\n        }; // The \"compact\" mode is mainly used as the panorama within Brush\n\n        if (compact) {\n          return React.createElement(Surface, _extends({}, attrs, {\n            width: width,\n            height: height\n          }), this.renderClipPath(), renderByOrder(children, map));\n        }\n\n        var events = this.parseEventsOfWrapper();\n        return React.createElement(\"div\", _extends({\n          className: classNames('recharts-wrapper', className),\n          style: _objectSpread({\n            position: 'relative',\n            cursor: 'default',\n            width: width,\n            height: height\n          }, style)\n        }, events, {\n          ref: function ref(node) {\n            _this7.container = node;\n          }\n        }), React.createElement(Surface, _extends({}, attrs, {\n          width: width,\n          height: height\n        }), this.renderClipPath(), renderByOrder(children, map)), this.renderLegend(), this.renderTooltip());\n      }\n    }], [{\n      key: \"getAxisNameByLayout\",\n      value: function getAxisNameByLayout(layout) {\n        if (layout === 'horizontal') {\n          return {\n            numericAxisName: 'yAxis',\n            cateAxisName: 'xAxis'\n          };\n        }\n\n        if (layout === 'vertical') {\n          return {\n            numericAxisName: 'xAxis',\n            cateAxisName: 'yAxis'\n          };\n        }\n\n        if (layout === 'centric') {\n          return {\n            numericAxisName: 'radiusAxis',\n            cateAxisName: 'angleAxis'\n          };\n        }\n\n        return {\n          numericAxisName: 'angleAxis',\n          cateAxisName: 'radiusAxis'\n        };\n      }\n    }, {\n      key: \"renderActiveDot\",\n      value: function renderActiveDot(option, props) {\n        var dot;\n\n        if (isValidElement(option)) {\n          dot = cloneElement(option, props);\n        } else if (_isFunction(option)) {\n          dot = option(props);\n        } else {\n          dot = React.createElement(Dot, props);\n        }\n\n        return React.createElement(Layer, {\n          className: \"recharts-active-dot\",\n          key: props.key\n        }, dot);\n      }\n    }]);\n\n    return CategoricalChartWrapper;\n  }(Component);\n\n  CategoricalChartWrapper.displayName = chartName;\n  CategoricalChartWrapper.propTypes = _objectSpread({\n    syncId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    compact: PropTypes.bool,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    data: PropTypes.arrayOf(PropTypes.object),\n    layout: PropTypes.oneOf(['horizontal', 'vertical']),\n    stackOffset: PropTypes.oneOf(['sign', 'expand', 'none', 'wiggle', 'silhouette']),\n    throttleDelay: PropTypes.number,\n    margin: PropTypes.shape({\n      top: PropTypes.number,\n      right: PropTypes.number,\n      bottom: PropTypes.number,\n      left: PropTypes.number\n    }),\n    barCategoryGap: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    barGap: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    barSize: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    maxBarSize: PropTypes.number,\n    style: PropTypes.object,\n    className: PropTypes.string,\n    children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n    defaultShowTooltip: PropTypes.bool,\n    onClick: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseDown: PropTypes.func,\n    onMouseUp: PropTypes.func,\n    reverseStackOrder: PropTypes.bool,\n    id: PropTypes.string\n  }, propTypes);\n  CategoricalChartWrapper.defaultProps = _objectSpread({\n    layout: 'horizontal',\n    stackOffset: 'none',\n    barCategoryGap: '10%',\n    barGap: 4,\n    margin: {\n      top: 5,\n      right: 5,\n      bottom: 5,\n      left: 5\n    },\n    reverseStackOrder: false\n  }, defaultProps);\n\n  CategoricalChartWrapper.createDefaultState = function (props) {\n    var children = props.children,\n        defaultShowTooltip = props.defaultShowTooltip;\n    var brushItem = findChildByType(children, Brush);\n    var startIndex = brushItem && brushItem.props && brushItem.props.startIndex || 0;\n    var endIndex = brushItem && brushItem.props && brushItem.props.endIndex || props.data && props.data.length - 1 || 0;\n    return {\n      chartX: 0,\n      chartY: 0,\n      dataStartIndex: startIndex,\n      dataEndIndex: endIndex,\n      activeTooltipIndex: -1,\n      isTooltipActive: !_isNil(defaultShowTooltip) ? defaultShowTooltip : false\n    };\n  };\n\n  CategoricalChartWrapper.hasBar = function (graphicalItems) {\n    if (!graphicalItems || !graphicalItems.length) {\n      return false;\n    }\n\n    return graphicalItems.some(function (item) {\n      var name = getDisplayName(item && item.type);\n      return name && name.indexOf('Bar') >= 0;\n    });\n  };\n\n  CategoricalChartWrapper.getDisplayedData = function (props, _ref11, item) {\n    var graphicalItems = _ref11.graphicalItems,\n        dataStartIndex = _ref11.dataStartIndex,\n        dataEndIndex = _ref11.dataEndIndex;\n    var itemsData = (graphicalItems || []).reduce(function (result, child) {\n      var itemData = child.props.data;\n\n      if (itemData && itemData.length) {\n        return _toConsumableArray(result).concat(_toConsumableArray(itemData));\n      }\n\n      return result;\n    }, []);\n\n    if (itemsData && itemsData.length > 0) {\n      return itemsData;\n    }\n\n    if (item && item.props && item.props.data && item.props.data.length > 0) {\n      return item.props.data;\n    }\n\n    var data = props.data;\n\n    if (data && data.length && isNumber(dataStartIndex) && isNumber(dataEndIndex)) {\n      return data.slice(dataStartIndex, dataEndIndex + 1);\n    }\n\n    return [];\n  };\n\n  return CategoricalChartWrapper;\n};\n\nexport default generateCategoricalChart;","map":null,"metadata":{},"sourceType":"module"}