{"ast":null,"code":"export const formatDate = date => {\n  const d = new Date(date);\n\n  if (isToday(d)) {\n    const parsed = new Intl.DateTimeFormat('pt-BR', {\n      day: 'numeric',\n      month: 'long'\n    }).format(d).replace(' de', '');\n    return \"Hoje \".concat(parsed);\n  }\n\n  return new Intl.DateTimeFormat('pt-BR', {\n    weekday: 'long',\n    day: 'numeric',\n    month: 'long'\n  }).format(d).replace(',', '').replace('-feira', '').replace(' de', '');\n};\nexport const isToday = date => {\n  const today = new Date();\n  return date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n};\nexport const formatForecast = (value, symbol) => \"\".concat(value).concat(symbol);\nexport const truncate = value => Math.trunc(value);","map":{"version":3,"sources":["/home/marcos/www/challenge/src/utils/index.js"],"names":["formatDate","date","d","Date","isToday","parsed","Intl","DateTimeFormat","day","month","format","replace","weekday","today","getDate","getMonth","getFullYear","formatForecast","value","symbol","truncate","Math","trunc"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAGC,IAAI,IAAI;AAChC,QAAMC,CAAC,GAAG,IAAIC,IAAJ,CAASF,IAAT,CAAV;;AAEA,MAAIG,OAAO,CAACF,CAAD,CAAX,EAAgB;AACd,UAAMG,MAAM,GAAG,IAAIC,IAAI,CAACC,cAAT,CAAwB,OAAxB,EAAiC;AAC9CC,MAAAA,GAAG,EAAE,SADyC;AAE9CC,MAAAA,KAAK,EAAE;AAFuC,KAAjC,EAIZC,MAJY,CAILR,CAJK,EAKZS,OALY,CAKJ,KALI,EAKG,EALH,CAAf;AAOA,0BAAeN,MAAf;AACD;;AAED,SAAO,IAAIC,IAAI,CAACC,cAAT,CAAwB,OAAxB,EAAiC;AACtCK,IAAAA,OAAO,EAAE,MAD6B;AAEtCJ,IAAAA,GAAG,EAAE,SAFiC;AAGtCC,IAAAA,KAAK,EAAE;AAH+B,GAAjC,EAKJC,MALI,CAKGR,CALH,EAMJS,OANI,CAMI,GANJ,EAMS,EANT,EAOJA,OAPI,CAOI,QAPJ,EAOc,EAPd,EAQJA,OARI,CAQI,KARJ,EAQW,EARX,CAAP;AASD,CAvBM;AAyBP,OAAO,MAAMP,OAAO,GAAGH,IAAI,IAAI;AAC7B,QAAMY,KAAK,GAAG,IAAIV,IAAJ,EAAd;AAEA,SACEF,IAAI,CAACa,OAAL,OAAmBD,KAAK,CAACC,OAAN,EAAnB,IACAb,IAAI,CAACc,QAAL,OAAoBF,KAAK,CAACE,QAAN,EADpB,IAEAd,IAAI,CAACe,WAAL,OAAuBH,KAAK,CAACG,WAAN,EAHzB;AAKD,CARM;AAUP,OAAO,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,MAAR,eAAsBD,KAAtB,SAA8BC,MAA9B,CAAvB;AAEP,OAAO,MAAMC,QAAQ,GAAGF,KAAK,IAAIG,IAAI,CAACC,KAAL,CAAWJ,KAAX,CAA1B","sourcesContent":["export const formatDate = date => {\n  const d = new Date(date)\n\n  if (isToday(d)) {\n    const parsed = new Intl.DateTimeFormat('pt-BR', {\n      day: 'numeric',\n      month: 'long'\n    })\n      .format(d)\n      .replace(' de', '')\n\n    return `Hoje ${parsed}`\n  }\n\n  return new Intl.DateTimeFormat('pt-BR', {\n    weekday: 'long',\n    day: 'numeric',\n    month: 'long'\n  })\n    .format(d)\n    .replace(',', '')\n    .replace('-feira', '')\n    .replace(' de', '')\n}\n\nexport const isToday = date => {\n  const today = new Date()\n\n  return (\n    date.getDate() === today.getDate() &&\n    date.getMonth() === today.getMonth() &&\n    date.getFullYear() === today.getFullYear()\n  )\n}\n\nexport const formatForecast = (value, symbol) => `${value}${symbol}`\n\nexport const truncate = value => Math.trunc(value)\n"]},"metadata":{},"sourceType":"module"}