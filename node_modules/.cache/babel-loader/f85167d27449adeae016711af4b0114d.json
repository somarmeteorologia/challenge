{"ast":null,"code":"import _objectSpread from \"/home/marcos/www/challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/marcos/www/challenge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/marcos/www/challenge/src/pages/Main/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { formatDate, truncate } from '../../utils';\nimport Table from '../../components/Table';\nimport Chart from '../../components/Chart';\nimport Loader from '../../components/Loader';\nimport { Container, Wrapper } from './styles';\nexport default function Main() {\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        loading = _useState2[0],\n        setLoading = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        location = _useState4[0],\n        setLocation = _useState4[1];\n\n  const _useState5 = useState({\n    table: {\n      date: [],\n      min: [],\n      max: [],\n      humidity: []\n    },\n    chart: []\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        forecast = _useState6[0],\n        setForecast = _useState6[1];\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(({\n      coords: {\n        latitude,\n        longitude\n      }\n    }) => {\n      setLocation({\n        latitude,\n        longitude\n      });\n    });\n  }, []);\n  useEffect(() => {\n    if (location) {\n      fetchForecast(location);\n    }\n  }, [location]);\n\n  async function fetchForecast(location) {\n    try {\n      setLoading(true);\n      const latitude = location.latitude,\n            longitude = location.longitude;\n      const headers = new Headers({\n        'x-api-key': process.env.REACT_APP_API_KEY\n      });\n      const response = await fetch(\"\".concat(process.env.REACT_APP_API_URL, \"/forecast/10days?latitude=\").concat(latitude, \"&longitude=\").concat(longitude, \"&reference=Somar\"), {\n        headers\n      });\n\n      const _ref = await response.json(),\n            days = _ref.days,\n            _ref$points$forecast = _ref.points.forecast,\n            temperature_daily_min = _ref$points$forecast.temperature_daily_min,\n            temperature_daily_max = _ref$points$forecast.temperature_daily_max,\n            rel_humidity_daily_avg = _ref$points$forecast.rel_humidity_daily_avg;\n\n      const data = {\n        date: days.slice(0, 7).map(date => formatDate(date)),\n        min: temperature_daily_min.slice(0, 7).map(min => truncate(min)),\n        max: temperature_daily_max.slice(0, 7).map(max => truncate(max)),\n        humidity: rel_humidity_daily_avg.slice(0, 7).map(humidity => truncate(humidity))\n      };\n\n      const tableData = _objectSpread({}, data);\n\n      const chartData = [];\n      data.date.forEach((_, index) => {\n        chartData[index] = {\n          min: data.min[index],\n          max: data.max[index],\n          humidity: data.humidity[index]\n        };\n      });\n      setForecast({\n        table: _objectSpread({}, tableData),\n        chart: [...chartData]\n      });\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n    }\n  }\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, loading ? React.createElement(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }) : React.createElement(React.Fragment, null, React.createElement(Table, {\n    data: forecast.table,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), React.createElement(Chart, {\n    data: forecast.chart,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }))));\n}","map":{"version":3,"sources":["/home/marcos/www/challenge/src/pages/Main/index.js"],"names":["React","useState","useEffect","formatDate","truncate","Table","Chart","Loader","Container","Wrapper","Main","loading","setLoading","location","setLocation","table","date","min","max","humidity","chart","forecast","setForecast","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","fetchForecast","headers","Headers","process","env","REACT_APP_API_KEY","response","fetch","REACT_APP_API_URL","json","days","points","temperature_daily_min","temperature_daily_max","rel_humidity_daily_avg","data","slice","map","tableData","chartData","forEach","_","index","error"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport { formatDate, truncate } from '../../utils'\n\nimport Table from '../../components/Table'\nimport Chart from '../../components/Chart'\nimport Loader from '../../components/Loader'\n\nimport { Container, Wrapper } from './styles'\n\nexport default function Main () {\n  const [loading, setLoading] = useState(true)\n  const [location, setLocation] = useState(null)\n  const [forecast, setForecast] = useState({\n    table: {\n      date: [],\n      min: [],\n      max: [],\n      humidity: []\n    },\n    chart: []\n  })\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(\n      ({ coords: { latitude, longitude } }) => {\n        setLocation({ latitude, longitude })\n      }\n    )\n  }, [])\n\n  useEffect(() => {\n    if (location) {\n      fetchForecast(location)\n    }\n  }, [location])\n\n  async function fetchForecast (location) {\n    try {\n      setLoading(true)\n\n      const { latitude, longitude } = location\n\n      const headers = new Headers({\n        'x-api-key': process.env.REACT_APP_API_KEY\n      })\n\n      const response = await fetch(\n        `${\n          process.env.REACT_APP_API_URL\n        }/forecast/10days?latitude=${latitude}&longitude=${longitude}&reference=Somar`,\n        { headers }\n      )\n\n      const {\n        days,\n        points: {\n          forecast: {\n            temperature_daily_min,\n            temperature_daily_max,\n            rel_humidity_daily_avg\n          }\n        }\n      } = await response.json()\n\n      const data = {\n        date: days.slice(0, 7).map(date => formatDate(date)),\n        min: temperature_daily_min.slice(0, 7).map(min => truncate(min)),\n        max: temperature_daily_max.slice(0, 7).map(max => truncate(max)),\n        humidity: rel_humidity_daily_avg\n          .slice(0, 7)\n          .map(humidity => truncate(humidity))\n      }\n\n      const tableData = { ...data }\n\n      const chartData = []\n\n      data.date.forEach((_, index) => {\n        chartData[index] = {\n          min: data.min[index],\n          max: data.max[index],\n          humidity: data.humidity[index]\n        }\n      })\n\n      setForecast({\n        table: { ...tableData },\n        chart: [...chartData]\n      })\n\n      setLoading(false)\n    } catch (error) {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Container>\n      <Wrapper>\n        {loading ? (\n          <Loader />\n        ) : (\n          <>\n            <Table data={forecast.table} />\n            <Chart data={forecast.chart} />\n          </>\n        )}\n      </Wrapper>\n    </Container>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}